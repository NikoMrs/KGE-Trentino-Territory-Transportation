PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX etype: <http://knowdive.disi.unitn.it/etype#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

# 4.3 (Marco): On line 7, how many stops are there from “"Gorizia Adamello” to “Gocciadoro Arcate”?

select distinct ?line_name ?departure_name ?arrival_name ((xsd:integer(?arrival_sequence) - xsd:integer(?departure_sequence)) as ?n_stops) where { 

    # Define the departure and arrival event for every trip and filter by direction
    ?trip etype:Contains ?departure_event, ?arrival_event .
    ?trip etype:trip_direction ?trip_direction .
    FILTER(STR(?trip_direction) = "0")
    
    # Select the departure stop by name
	?departure_stop etype:name ?departure_name ;
    FILTER(STR(?departure_name) = "Gorizia Adamello")
    
    # Select the arrival stop by name
    ?arrival_stop etype:name ?arrival_name .
    FILTER(STR(?arrival_name) = "Gocciadoro \"Arcate\"")
    
   	# Connect the previously defined stops with the corresponding stop events
	?departure_stop etype:is_location_for ?departure_event .
    ?departure_event etype:sequence_number ?departure_sequence ;
            		 etype:arrival_time ?departure_time .
            
    ?arrival_stop etype:is_location_for ?arrival_event .
    ?arrival_event etype:sequence_number ?arrival_sequence ;
            	   etype:arrival_time ?arrival_time .	
    
   	# Connect the lines with trips
    ?line etype:composed_of ?trip .
    ?line etype:line_short_name ?line_name .
    
    # We want only the arrival stops that appen after the departure event 
    FILTER(str(?arrival_sequence) > str(?departure_sequence))
    
}
import os
import pandas as pd

etypes_dir = ["../../Phase 5 - Entity Definition/Datasets/cleaned datasets/city.csv",
              "../../Phase 5 - Entity Definition/Datasets/cleaned datasets/city.csv",
              "../../Phase 5 - Entity Definition/Datasets/cleaned datasets/bike_parking.csv",
              "../../Phase 5 - Entity Definition/Datasets/cleaned datasets/bike_sharing.csv",
              "../../Phase 5 - Entity Definition/Datasets/cleaned datasets/car_sharing.csv",
              "../../Phase 5 - Entity Definition/Datasets/cleaned datasets/parking_facility.csv",
              "../../Phase 5 - Entity Definition/Datasets/cleaned datasets/scooter_rental.csv",
              "../../Phase 5 - Entity Definition/Datasets/cleaned datasets/trentino_trasporti/stops.csv",
              "../../Phase 5 - Entity Definition/Datasets/cleaned datasets/taxi_stand.csv",
              "../../Phase 5 - Entity Definition/Datasets/cleaned datasets/trentino_trasporti/stop_events.csv",
              "../../Phase 5 - Entity Definition/Datasets/cleaned datasets/trentino_trasporti/transportation_lines.csv",
              "../../Phase 5 - Entity Definition/Datasets/cleaned datasets/trentino_trasporti/transportation_schedules.csv",
              "../../Phase 5 - Entity Definition/Datasets/cleaned datasets/trentino_trasporti/transportation_special_schedules.csv",
              "../../Phase 5 - Entity Definition/Datasets/cleaned datasets/trentino_trasporti/transportation_systems.csv",
              "../../Phase 5 - Entity Definition/Datasets/cleaned datasets/trentino_trasporti/trips.csv"]

etypes = ["City", "Place", "Bicycle_parking", "Bike_sharing", "Car_sharing", "Parking_facility", "Scooter_rental",
          "Stop", "Taxi_stand", "Stop_event", "Transit_line", "Transportation_schedule",
          "Transportation_special_schedule", "Transportation_system", "Transportation_trip"]

etypes_excluded_columns = [[], [], [], [], [], [], [], [], [], ["stop_id"], ["agency_id"], [], ["service_id"],
                           [], ["route_id", "service_id"]]

etypes_info = {etype: {"dir": path, "excluded_columns": ex_column} for etype, path, ex_column in
               zip(etypes, etypes_dir, etypes_excluded_columns)}


def print_connectivity_matrix(conn_matrix):

    print(f"Connectivity Matrix: \n")
    for row, columns in conn_matrix.items():
        print(f"{row}:")
        for col, value in columns.items():
            print(f"  {col}: {value}")
        print()

    print(f"Connectivity Matrix for Excel: \n")
    for row, columns in conn_matrix.items():
        values = list(columns.values())
        print('\t'.join(map(str, values)))

    print("\n")

def connectivity_matrix():
    conn_matrix = {row: {column: 0 for column in etypes} for row in etypes}

    # Diagonals values
    for etype, info in etypes_info.items():
        df = pd.read_csv(info["dir"], sep=";")
        df_filtered = df.drop(columns=info["excluded_columns"])

        non_null = df_filtered.count().sum()
        total = df_filtered.size

        # conn_matrix[etype][etype] = {"non_null": non_null, "total": total}
        conn_matrix[etype][etype] = non_null

    conn_matrix["Place"]["Place"] = 0
    is_a_place = ["City", "Bicycle_parking", "Bike_sharing", "Car_sharing", "Parking_facility",
                  "Scooter_rental", "Stop", "Taxi_stand"]
    for etype in is_a_place:
        df = pd.read_csv(etypes_info[etype]["dir"], sep=";")
        df_filtered = df[["latitude", "longitude"]]

        conn_matrix["Place"]["Place"] += df_filtered.count().sum()

    # Has_a obj. prop.
    df = pd.read_csv(etypes_info["Bicycle_parking"]["dir"], sep=";")
    df_filtered = df["city_id"]
    conn_matrix["City"]["Bicycle_parking"] = df_filtered.count().sum()

    df = pd.read_csv(etypes_info["Bike_sharing"]["dir"], sep=";")
    df_filtered = df["city_id"]
    conn_matrix["City"]["Bike_sharing"] = df_filtered.count().sum()

    df = pd.read_csv(etypes_info["Car_sharing"]["dir"], sep=";")
    df_filtered = df["city_id"]
    conn_matrix["City"]["Car_sharing"] = df_filtered.count().sum()

    df = pd.read_csv(etypes_info["Parking_facility"]["dir"], sep=";")
    df_filtered = df["city_id"]
    conn_matrix["City"]["Parking_facility"] = df_filtered.count().sum()

    df = pd.read_csv(etypes_info["Scooter_rental"]["dir"], sep=";")
    df_filtered = df["city_id"]
    conn_matrix["City"]["Scooter_rental"] = df_filtered.count().sum()

    df = pd.read_csv(etypes_info["Taxi_stand"]["dir"], sep=";")
    df_filtered = df["city_id"]
    conn_matrix["City"]["Taxi_stand"] = df_filtered.count().sum()

    # Composed_of obj. prop.
    df = pd.read_csv(etypes_info["Transportation_trip"]["dir"], sep=";")
    df_filtered = df["route_id"]
    conn_matrix["Transit_line"]["Transportation_trip"] = df_filtered.count().sum()

    # Contains obj. prop.
    df = pd.read_csv(etypes_info["Stop_event"]["dir"], sep=";")
    df_filtered = df["trip_id"]
    conn_matrix["Transportation_trip"]["Stop_event"] = df_filtered.count().sum()

    # Hosts_an obj. prop.
    df = pd.read_csv(etypes_info["Transportation_system"]["dir"], sep=";")
    df_filtered = df["city_id"]
    conn_matrix["City"]["Transportation_system"] = df_filtered.count().sum()

    # Is_followed_by obj. prop.
    df = pd.read_csv(etypes_info["Transportation_trip"]["dir"], sep=";")
    df_filtered = df["service_id"]
    conn_matrix["Transportation_schedule"]["Transportation_trip"] = df_filtered.count().sum()

    # Is_location_for obj. prop.
    df = pd.read_csv(etypes_info["Stop_event"]["dir"], sep=";")
    df_filtered = df["stop_id"]
    conn_matrix["Stop"]["Stop_event"] = df_filtered.count().sum()

    # Provides obj. prop.
    df = pd.read_csv(etypes_info["Transit_line"]["dir"], sep=";")
    df_filtered = df["agency_id"]
    conn_matrix["Transportation_system"]["Transit_line"] = df_filtered.count().sum()

    # Refers_to obj. prop.
    df = pd.read_csv(etypes_info["Transportation_special_schedule"]["dir"], sep=";")
    df_filtered = df["service_id"]
    conn_matrix["Transportation_schedule"]["Transportation_special_schedule"] = df_filtered.count().sum()

    print_connectivity_matrix(conn_matrix)

    return conn_matrix

def property_connectivity(conn_matrix):

    PCs = {}
    for i in etypes:
        df = pd.read_csv(etypes_info[i]["dir"], sep=";")
        df_filtered = df.drop(columns=etypes_info[i]["excluded_columns"])
        DP = df_filtered.shape[1]
        PCs[i] = (conn_matrix[i][i] / DP)

    PCs["Place"] = conn_matrix["Place"]["Place"] / 2

    print(f"PCs: \n {PCs} \n")

    PC_kg = 0
    for i in PCs:
        PC_kg += PCs[i]

    print(f"PC KG: \n {PC_kg} \n")

    return

def entity_connectivity(conn_matrix):

    ECs = {}
    for i in etypes:
        row_sum = sum(conn_matrix[i][j] for j in etypes if j != i)
        OP = sum(1 for j in etypes if (j != i and conn_matrix[i][j] != 0))
        if OP == 0:
            OP = 1
        ECs[i] = row_sum / OP

    print(f"ECs: \n {ECs} \n")

    EC_kg = 0
    for i in ECs:
        EC_kg += ECs[i]

    print(f"EC KG: \n {EC_kg} \n")

    return


if __name__ == '__main__':
    matrix = connectivity_matrix()
    entity_connectivity(matrix)
    property_connectivity(matrix)
